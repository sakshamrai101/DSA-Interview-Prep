Question 1: Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity. (Problem 704)

My solution: 

class Solution {
    public int search(int[] nums, int target) {
        int result = -1;
        for (int index = 0; index < nums.length; index++) {
            if(nums[index] == target) {
                result = index;
            }
        }
        return result;
    }
}
Correct Solution:

class Solution {
    public int search(int[] nums, int target) {
        int left = 0; 
        int right = nums.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                return mid;
            }
            else if (nums[mid] < target) {
                left = mid + 1;
            }
            else {
                right = mid - 1;
            }
        }
        return -1;
    }

}

Question 2: Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

My Solution:


Actual Solution: 
class Solution {
public:
    int singleNumber(vector<int>& nums) { 
       unordered_map<int,int> a;
	   for(auto x: nums)
		   a[x]++;
	   for(auto z:a)
		   if(z.second==1)
			   return z.first;
	   return -1;
    }
};
